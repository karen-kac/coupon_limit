import React, { useEffect, useRef, useCallback, useState } from 'react';
import { createRoot } from 'react-dom/client';
import { Coupon, Location } from '../types';
import ExplosionEffect from './ExplosionEffect';
import './ExplosionEffect.css';

interface MapViewProps {
  userLocation: Location | null;
  coupons: Coupon[];
  onCouponClick: (coupon: Coupon) => void;
  error: string | null;
  expiringCoupons: Set<string>;
  onExplosionComplete: (couponId: string) => void;
}

declare global {
  interface Window {
    google: any;
    initMap: () => void;
  }
}

const MapView: React.FC<MapViewProps> = ({ userLocation, coupons, onCouponClick, error, expiringCoupons, onExplosionComplete }) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<any>(null);
  const markersRef = useRef<any[]>([]);
  const explosionOverlaysRef = useRef<Map<string, any>>(new Map()); // „ÇØ„Éº„Éù„É≥ID„Å®ÁàÜÁô∫„Ç™„Éº„Éê„Éº„É¨„Ç§„ÅÆ„Éû„ÉÉ„Éó
  const userMarkerRef = useRef<any>(null);
  const isMapInitializedRef = useRef(false);
  const [showExplosion, setShowExplosion] = useState(false);

  // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„ÇíËøΩÂä†
  React.useEffect(() => {
    console.log('MapView received coupons:', coupons);
    console.log('MapView userLocation:', userLocation);
    console.log('MapView error:', error);
  }, [coupons, userLocation, error]);

  const updateMarkers = useCallback(() => {

    console.log('updateMarkers called');
    console.log('mapInstanceRef.current:', !!mapInstanceRef.current);
    console.log('window.google:', !!window.google);
    console.log('coupons to process:', coupons.length);
    console.log('expiringCoupons:', Array.from(expiringCoupons));
    
    if (!mapInstanceRef.current || !window.google) {
      console.log('Early return: no map instance or google maps');
      return;
    }

    // Clear existing markers (but keep explosion overlays)
    markersRef.current.forEach(marker => {
      if (marker && marker.setMap) {
        marker.setMap(null);
      }
    });
    markersRef.current = [];

    // Clean up completed explosions (remove overlays for coupons no longer in expiringCoupons)
    const currentExplosions = explosionOverlaysRef.current;
    Array.from(currentExplosions.entries()).forEach(([couponId, overlay]) => {
      if (!expiringCoupons.has(couponId)) {
        console.log(`üßπ Cleaning up completed explosion for coupon ${couponId}`);
        if (overlay && overlay.setMap) {
          overlay.setMap(null);
        }
        currentExplosions.delete(couponId);
      }
    });

    // Add coupon markers and explosion effects
    coupons.forEach((coupon, index) => {
      console.log(`Processing coupon ${index}: ${coupon.id}`);
      
      // Validate coupon location
      if (!coupon.location || typeof coupon.location.lat !== 'number' || typeof coupon.location.lng !== 'number') {
        console.warn(`Invalid location for coupon ${coupon.id}:`, coupon.location);
        return;
      }
      
      const isNearby = coupon.distance_meters !== undefined && coupon.distance_meters <= 300;
      
      // Get appropriate color and emoji for coupon source
      let markerColor = '#ff4444'; // ÂÜÖÈÉ®„ÇØ„Éº„Éù„É≥ (Ëµ§Ëâ≤„ÉªüõçÔ∏è)
      let markerEmoji = 'üõçÔ∏è';
      let sourceType = 'internal'; // „Éá„Éï„Ç©„É´„Éà
      
      // „ÇØ„Éº„Éù„É≥ID„Åã„Çâ„ÇΩ„Éº„Çπ„ÇíÂà§ÂÆö„Åô„ÇãÂ†¥Âêà„ÇÇÂê´„ÇÅ„Çã
      if (coupon.source === 'hotpepper' || coupon.id.startsWith('hotpepper_')) {
        markerColor = '#FF6600'; // Hot Pepper„ÇØ„Éº„Éù„É≥ („Ç™„É¨„É≥„Ç∏Ëâ≤„ÉªüçΩÔ∏è)
        markerEmoji = 'üçΩÔ∏è';
        sourceType = 'hotpepper';
      } else if (coupon.source === 'kumapon' || coupon.id.startsWith('kumapon_')) {
        markerColor = '#4285F4'; // Kumapon„ÇØ„Éº„Éù„É≥ (ÈùíËâ≤„Éªüêª)
        markerEmoji = 'üêª';
        sourceType = 'kumapon';
      } else if (coupon.source === 'yahoo' || coupon.id.startsWith('yahoo_')) {
        markerColor = '#FF0033'; // YahooÂú∞Âõ≥„ÇØ„Éº„Éù„É≥ (YahooËµ§Ëâ≤„Éªüó∫Ô∏è)
        markerEmoji = 'üó∫Ô∏è';
        sourceType = 'yahoo';
      } else if (coupon.source === 'external') {
        markerColor = '#4285F4';
        markerEmoji = 'üåê';
        sourceType = 'external';
      }

      // Create marker with simplified icon first
      let markerIcon;
      const position = { lat: coupon.location.lat, lng: coupon.location.lng };
      
      try {
        // Try to create custom SVG icon (original coupon shape)
        const svgIcon = `
          <svg width="80" height="80" viewBox="0 0 80 80" xmlns="http://www.w3.org/2000/svg">
            <rect x="5" y="5" width="70" height="70" rx="16" fill="${markerColor}" stroke="white" stroke-width="3" stroke-dasharray="${isNearby ? '0' : '5,5'}"/>
            <text x="40" y="35" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="20" font-weight="bold">${markerEmoji}</text>
            <text x="40" y="55" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="12" font-weight="bold">COUPON</text>
            <text x="40" y="68" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="10" font-weight="bold">${coupon.current_discount}%</text>
          </svg>
        `;
        
        markerIcon = {
          url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(svgIcon),
          scaledSize: new window.google.maps.Size(60, 60),
          anchor: new window.google.maps.Point(30, 55)
        };
      } catch (error) {
        console.warn('Failed to create custom SVG icon, using colored pin:', error);
        // Use default colored pin as fallback
        let pinColor = 'red';
        if (sourceType === 'hotpepper') {
          pinColor = 'orange';
        } else if (sourceType === 'yahoo') {
          pinColor = 'red';
        } else if (sourceType === 'kumapon' || sourceType === 'external') {
          pinColor = 'blue';
        }
        
        markerIcon = `https://maps.google.com/mapfiles/ms/icons/${pinColor}-dot.png`;
      }

      // Check if this coupon is expiring
      const isExpiring = expiringCoupons.has(coupon.id);
      
      if (isExpiring) {
        console.log(`üéÜ Creating explosion effect for coupon ${coupon.id}`);
        
        // Check if explosion overlay already exists for this coupon
        if (explosionOverlaysRef.current.has(coupon.id)) {
          console.log(`‚ö° Explosion already exists for coupon ${coupon.id}, skipping creation`);
          return;
        }
        
        // Skip creating any marker for expiring coupons - only create explosion effect
        const explosionOverlay = new window.google.maps.OverlayView();
        explosionOverlay.onAdd = function() {
          const div = document.createElement('div');
          div.style.position = 'absolute';
          div.style.transform = 'translate(-50%, -50%)';
          div.style.pointerEvents = 'none'; // „Éû„Ç¶„Çπ„Ç§„Éô„É≥„Éà„ÇíÈÄö„Åï„Å™„ÅÑ
          
          // Mount React component
          const explosionRoot = document.createElement('div');
          div.appendChild(explosionRoot);
          
          // Use ReactDOM.render to mount the ExplosionEffect
          const root = createRoot(explosionRoot);
          const ExplosionComponent = React.createElement(ExplosionEffect, {
            onComplete: () => {
              console.log(`üéÜ Explosion completed for coupon ${coupon.id}`);
              // ÁàÜÁô∫ÂÆå‰∫ÜÊôÇ„Å´Âç≥Â∫ß„Å´„Ç™„Éº„Éê„Éº„É¨„Ç§„ÇíÂâäÈô§
              explosionOverlay.setMap(null);
              // ÁàÜÁô∫„Ç™„Éº„Éê„Éº„É¨„Ç§„ÇíÁÆ°ÁêÜ„Éû„ÉÉ„Éó„Åã„ÇâÂâäÈô§
              explosionOverlaysRef.current.delete(coupon.id);
              // „Åù„ÅÆÂæå„ÄÅË¶™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´ÂÆå‰∫Ü„ÇíÈÄöÁü•
              onExplosionComplete(coupon.id);
            },
            useLottie: false,
            useWebM: true,
            isDebug: false
          });
          root.render(ExplosionComponent);
          
          this.getPanes()!.overlayMouseTarget.appendChild(div);
          this.div = div;
        };
        
        explosionOverlay.draw = function() {
          const projection = this.getProjection();
          const point = projection.fromLatLngToDivPixel(position);
          if (point && this.div) {
            this.div.style.left = point.x + 'px';
            this.div.style.top = point.y + 'px';
          }
        };
        
        explosionOverlay.onRemove = function() {
          if (this.div && this.div.parentNode) {
            this.div.parentNode.removeChild(this.div);
          }
        };
        
        explosionOverlay.setMap(mapInstanceRef.current);
        // ÁàÜÁô∫„Ç™„Éº„Éê„Éº„É¨„Ç§„ÇíÂ∞ÇÁî®„ÅÆ„Éû„ÉÉ„Éó„ÅßÁÆ°ÁêÜ
        explosionOverlaysRef.current.set(coupon.id, explosionOverlay);
      } else {
        // Create normal marker
        try {
          const marker = new window.google.maps.Marker({
            position: position,
            map: mapInstanceRef.current,
            title: `${coupon.store_name || coupon.shop_name} - ${coupon.current_discount}% OFF`,
            icon: markerIcon,
            animation: isNearby ? window.google.maps.Animation.BOUNCE : undefined,
            optimized: false // For custom SVG icons
          });

          console.log(`‚úÖ Marker created for coupon ${coupon.id} at (${position.lat}, ${position.lng})`);

          marker.addListener('click', () => {
            console.log(`Marker clicked for coupon: ${coupon.id}`);
            onCouponClick(coupon);
          });

          markersRef.current.push(marker);
        } catch (error) {
          console.error(`Failed to create marker for coupon ${coupon.id}:`, error);
        }
      }
    });

    
    console.log(`‚úÖ Total markers created: ${markersRef.current.length}`);
    console.log('üîÑ Markers updated (map view unchanged)');

  }, [coupons, onCouponClick, expiringCoupons, onExplosionComplete]);

  const updateUserMarker = useCallback(() => {
    if (!mapInstanceRef.current || !userLocation || !window.google) {
      return;
    }

    // Remove existing user marker
    if (userMarkerRef.current) {
      userMarkerRef.current.setMap(null);
    }

    // Create new user marker
    const userMarker = new window.google.maps.Marker({
      position: { lat: userLocation.lat, lng: userLocation.lng },
      map: mapInstanceRef.current,
      title: '„ÅÇ„Å™„Åü„ÅÆÁèæÂú®‰ΩçÁΩÆ',
      icon: {
        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
          <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" fill="#4285F4" stroke="white" stroke-width="3"/>
            <circle cx="12" cy="12" r="4" fill="white"/>
            <circle cx="12" cy="12" r="2" fill="#4285F4"/>
          </svg>
        `),
        scaledSize: new window.google.maps.Size(24, 24),
        anchor: new window.google.maps.Point(12, 12)
      },
      zIndex: 1000
    });

    userMarkerRef.current = userMarker;
    console.log('‚úÖ User marker updated at:', userLocation);
  }, [userLocation]);

  const initializeMap = useCallback(() => {
    console.log('üó∫Ô∏è initializeMap called');
    console.log('userLocation:', !!userLocation);
    console.log('mapRef.current:', !!mapRef.current);
    console.log('window.google:', !!window.google);
    console.log('isMapInitialized:', isMapInitializedRef.current);
    
    if (!userLocation || !mapRef.current || !window.google) {
      console.log('‚ùå initializeMap early return - missing dependencies');
      return;
    }

    // „Éû„ÉÉ„Éó„ÅåÊó¢„Å´ÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„É¶„Éº„Ç∂„Éº„Éû„Éº„Ç´„Éº„ÅÆ„ÅøÊõ¥Êñ∞
    if (isMapInitializedRef.current && mapInstanceRef.current) {
      console.log('üîÑ Map already initialized, updating user marker only');
      updateUserMarker();
      return;
    }

    console.log('‚úÖ Creating Google Map instance...');
    try {
      const map = new window.google.maps.Map(mapRef.current, {
        center: { lat: userLocation.lat, lng: userLocation.lng },
        zoom: 15,
        styles: [
          {
            featureType: 'poi',
            elementType: 'labels',
            stylers: [{ visibility: 'off' }]
          }
        ],
        mapTypeControl: false,
        streetViewControl: false,
        fullscreenControl: false
      });

      mapInstanceRef.current = map;
      isMapInitializedRef.current = true;
      console.log('‚úÖ Google Map instance created and stored');
      
      // Add user marker
      updateUserMarker();
      
      // È´òÈÄüÂåñÔºöÂç≥Â∫ß„Å´„Éû„Éº„Ç´„Éº„ÇíÊõ¥Êñ∞
      console.log('üîÑ Triggering marker update after map initialization');
      updateMarkers();
      
    } catch (error) {
      console.error('‚ùå Failed to initialize Google Map:', error);
    }
  }, [userLocation, updateMarkers, updateUserMarker]);

  // Google Maps API „ÅÆÂàùÊúüÂåñÔºàÊúÄÂàù„ÅÆ‰∏ÄÂõû„ÅÆ„ÅøÔºâ
  useEffect(() => {
    // Google Maps API„Ç≠„Éº„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ - „Éá„É¢Áî®„ÅÆAPI„Ç≠„Éº„Çí‰ΩøÁî®
    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'AIzaSyBFw0Qbyq9zTFTd-tUY6dpoWq2PVG7gA_M';
    
    if (!window.google && !document.querySelector('script[src*="maps.googleapis.com"]')) {
      console.log('üîÑ Loading Google Maps API...');
      const script = document.createElement('script');
      // È´òÈÄüÂåñÔºölibraries„ÇíÊúÄÂ∞èÈôê„Å´„ÄÅv=weekly„ÅßÊúÄÊñ∞Áâà„Çí‰ΩøÁî®
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&loading=async&callback=initMap&v=weekly`;
      script.async = true;
      script.defer = true;
      
      // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÂá¶ÁêÜ„ÇíËøΩÂä†ÔºàÊôÇÈñìÂª∂Èï∑Ôºâ
      const timeoutId = setTimeout(() => {
        console.warn('‚ö†Ô∏è Google Maps API loading timeout');
      }, 10000);
      
      script.onload = () => {
        clearTimeout(timeoutId);
        console.log('‚úÖ Google Maps API loaded successfully');
      };
      
      script.onerror = () => {
        clearTimeout(timeoutId);
        console.error('‚ùå Google Maps API failed to load. Please check your API key.');
      };
      
      document.head.appendChild(script);
      
      window.initMap = () => {
        clearTimeout(timeoutId);
        console.log('‚úÖ Google Maps callback triggered');
        // Âç≥Â∫ß„Å´ÂàùÊúüÂåñ„ÇíË©¶Ë°åÔºàuserLocation„Å®mapRef„ÅÆÁä∂ÊÖã„Å´Èñ¢‰øÇ„Å™„ÅèÔºâ
        const checkAndInit = () => {
          console.log('üîÑ Checking map initialization conditions after API load');
          console.log('- userLocation:', !!userLocation, userLocation);
          console.log('- mapRef.current:', !!mapRef.current);
          console.log('- isMapInitialized:', isMapInitializedRef.current);
          
          if (userLocation && mapRef.current) {
            console.log('‚úÖ All conditions met, initializing map from callback');
            initializeMap();
          } else {
            console.log('‚è≥ Conditions not met, retrying in 100ms');
            setTimeout(checkAndInit, 100);
          }
        };
        
        setTimeout(checkAndInit, 50);
      };
    } else if (window.google && userLocation && mapRef.current) {
      // Google Maps API„ÅåÊó¢„Å´Ë™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÂç≥Â∫ß„Å´ÂàùÊúüÂåñ
      console.log('üîÑ Google Maps API already loaded, initializing immediately');
      initializeMap();
    }
  }, []); // ‰æùÂ≠òÈÖçÂàó„ÇíÁ©∫„Å´„Åó„Å¶ÂàùÂõû„ÅÆ„ÅøÂÆüË°å

  // „Éû„ÉÉ„Éó„ÅÆÂàùÊúüÂåñÔºàuserLocation„ÅåÂà©Áî®ÂèØËÉΩ„Å´„Å™„Å£„Åü„Å®„ÅçÔºâ
  useEffect(() => {
    if (window.google && userLocation && mapRef.current) {
      console.log('‚úÖ Google Maps ready, initializing/updating map');
      initializeMap();
    } else {
      console.log('‚è≥ Map initialization conditions not met:', {
        googleMaps: !!window.google,
        userLocation: !!userLocation,
        mapRef: !!mapRef.current
      });
    }
  }, [userLocation, initializeMap]);

  // ËøΩÂä†ÔºömapRef„ÅåÂà©Áî®ÂèØËÉΩ„Å´„Å™„Å£„ÅüÊôÇ„ÅÆËøΩÂä†„ÉÅ„Çß„ÉÉ„ÇØ
  useEffect(() => {
    if (mapRef.current && window.google && userLocation && !isMapInitializedRef.current) {
      console.log('üîÑ MapRef ready, checking if map needs initialization');
      setTimeout(() => {
        if (mapRef.current && window.google && userLocation && !isMapInitializedRef.current) {
          console.log('‚úÖ Force initializing map due to mapRef availability');
          initializeMap();
        }
      }, 200);
    }
  }, [userLocation, initializeMap]);

  // ÊúÄÁµÇÁöÑ„Å™„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂÆöÊúüÁöÑ„Å´ÂàùÊúüÂåñÁä∂Ê≥Å„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  useEffect(() => {
    if (!isMapInitializedRef.current) {
      console.log('üîÑ Setting up periodic initialization check');
      const interval = setInterval(() => {
        if (window.google && userLocation && mapRef.current && !isMapInitializedRef.current) {
          console.log('üîÑ Periodic check: attempting map initialization');
          initializeMap();
        }
      }, 1000);

      // 30ÁßíÂæå„Å´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÔºàÂàùÊúüÂåñ„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Çã„Åã„ÄÅË´¶„ÇÅ„ÇãÔºâ- ÊôÇÈñì„ÇíÂª∂Èï∑
      const timeout = setTimeout(() => {
        console.log('‚è∞ Stopping periodic initialization check after 30 seconds');
        clearInterval(interval);
      }, 30000);

      return () => {
        clearInterval(interval);
        clearTimeout(timeout);
      };
    }
  }, [userLocation, initializeMap]);

  // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Éû„Ç¶„É≥„ÉàÂæå„ÅÆÂç≥Â∫ß„ÉÅ„Çß„ÉÉ„ÇØ
  useEffect(() => {
    const immediateCheck = () => {
      console.log('üîÑ Immediate post-mount check for map initialization');
      console.log('- window.google:', !!window.google);
      console.log('- userLocation:', !!userLocation);
      console.log('- mapRef.current:', !!mapRef.current);
      console.log('- isMapInitialized:', isMapInitializedRef.current);
      
      if (window.google && userLocation && mapRef.current && !isMapInitializedRef.current) {
        console.log('‚úÖ All conditions met on immediate check, initializing map');
        initializeMap();
      }
    };

    // ÈÅÖÂª∂ÊôÇÈñì„ÇíÂ§ßÂπÖ„Å´Âª∂Èï∑„Åó„ÄÅ„Çà„ÇäÂ§ö„Åè„ÅÆÂÜçË©¶Ë°å„ÇíËøΩÂä†Ôºà„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Å®APIË™≠„ÅøËæº„ÅøÂÆå‰∫Ü„ÇíÂæÖ„Å§Ôºâ
    const timeouts = [50, 200, 500, 1000, 2000, 3000, 5000, 7000].map(delay => 
      setTimeout(immediateCheck, delay)
    );

    return () => {
      timeouts.forEach(timeout => clearTimeout(timeout));
    };
  }, [initializeMap, userLocation]);  // initializeMap„Å®userLocation„Çí‰æùÂ≠òÈÖçÂàó„Å´ËøΩÂä†

  // „ÇØ„Éº„Éù„É≥„Éá„Éº„Çø„ÅÆÊõ¥Êñ∞ÊôÇ„ÅÆ„Åø„Éû„Éº„Ç´„Éº„ÇíÊõ¥Êñ∞
  useEffect(() => {
    console.log('üîÑ useEffect for updateMarkers triggered');
    console.log('mapInstanceRef.current exists:', !!mapInstanceRef.current);
    console.log('coupons count:', coupons.length);
    
    if (mapInstanceRef.current && window.google) {
      console.log('‚úÖ Calling updateMarkers...');
      // È´òÈÄüÂåñÔºöÈÅÖÂª∂„Å™„Åó„ÅßÂç≥Â∫ß„Å´Êõ¥Êñ∞
      updateMarkers();
    } else {
      console.log('‚è≥ updateMarkers not called - waiting for map instance');
      console.log('- Map instance:', !!mapInstanceRef.current);
      console.log('- Google Maps:', !!window.google);
    }
  }, [coupons, updateMarkers]);

  if (error) {
    return (
      <div className="map-error">
        <p>{error}</p>
      </div>
    );
  }

  // ‰ΩçÁΩÆÊÉÖÂ†±„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÁ∞°ÊΩî„Å´Ë°®Á§∫Ôºà„Åô„Åê„Å´„Éá„Éï„Ç©„É´„Éà‰ΩçÁΩÆ„ÅåË®≠ÂÆö„Åï„Çå„ÇãÔºâ
  if (!userLocation) {
    return (
      <div className="map-loading">
        <div className="loading-spinner">üìç</div>
        <p>„Éû„ÉÉ„Éó„ÇíÊ∫ñÂÇô‰∏≠...</p>
      </div>
    );
  }

  // Google Maps API„ÅåË™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÁ∞°ÊΩî„Å™Ë°®Á§∫
  if (!window.google) {
    return (
      <div className="map-loading">
        <div className="loading-spinner">üó∫Ô∏è</div>
        <p>„Éû„ÉÉ„Éó„ÇíÊ∫ñÂÇô‰∏≠...</p>
      </div>
    );
  }

  return (
    <div className="map-view" style={{ position: 'relative' }}>
      <div 
        ref={(ref) => {
          mapRef.current = ref;
          // mapRef„ÅåË®≠ÂÆö„Åï„Çå„ÅüÁû¨Èñì„Å´ÂàùÊúüÂåñ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
          if (ref && window.google && userLocation && !isMapInitializedRef.current) {
            console.log('üîÑ MapRef just set, checking initialization immediately');
            setTimeout(() => {
              if (window.google && userLocation && !isMapInitializedRef.current) {
                console.log('‚úÖ Initializing map from ref callback');
                initializeMap();
              }
            }, 10);
          }
        }}
        className="map-container" 
        style={{ width: '100%', height: '100%' }} 
      />
      

      {/* ÁàÜÁô∫„Ç®„Éï„Çß„ÇØ„Éà */}
      {showExplosion && (
        <ExplosionEffect 
          onComplete={() => setShowExplosion(false)} 
          useLottie={false}
          useWebM={true}
          isDebug={true}
        />
      )}
    </div>
  );
};

export default MapView;